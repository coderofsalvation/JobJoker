#!/bin/bash 
SELF_PATH=$(dirname $(readlink -f "$0"))
cd "$SELF_PATH"

requirements="sed grep printf php"

# checks if system is ok to run this php app
checkRequirements(){
  for req in $requirements; do
    hash "$req" 2>&-
    if [ $? == 1 ]; then echo "please install '$req'..aborting"; exit; fi
  done;
  return 0
}

patchconfig(){
  sed -i "s|.*'$1'.*|  '$1' => $2,|g" ../config.php 
}

# <email> - configures the email of maintainer + smtppassword
setemail(){
  cd $SELF_PATH;
  if [[ ! -n "$1" ]]; then 
    read -p "enter your emailaddress (example: array('my@email.com') ): " email
  else email="$1"; fi
  patchconfig maintainerEmails "$email"
}

# <domain> - configures the domain 
sethost(){
  cd $SELF_PATH;
  if [[ ! -n "$1" ]]; then 
    read -p "enter the address ('http:// your.domain.com/subdir') eg. where application can be accessed from the web: " host
  else host="$1"; fi
  patchconfig api "'$host'"
}

# <dbuser> <dbpw> <dbname> - updates the db settings 
setdb(){
  cd $SELF_PATH;
  if [[ ! -n "$3" ]]; then 
    read -p "enter mysql dbuser: " dbuser 
    read -p "enter mysql password: " dbpw 
    read -p "enter mysql dbname: " dbname 
  else 
    dbuser="$1"; dbpw="$2"; dbname="$3";
  fi
  patchconfig mysql_database "'$dbname'"
  patchconfig mysql_user "'$dbuser'"
  patchconfig mysql_password "'$dbpw'"
  if ! mysql -u $dbuser -p$dbpw $dbname -e "select database();" ; then 
    if mysql -u $dbuser -p$dbpw -e "create database $dbname;"; then 
      echo "[x] created database '$dbname'"
      echo "[x] importing database"
      mysql -u $dbuser -p$dbpw $dbname < ../db/schema.sql 
    else 
      echo "[!] could not create database '$dbname'..already exist or user/pwd incorrect?"
      return 1
    fi
  fi
  return 0
}

# checks if the application ready to test
checksanity(){
  printf "[x] testing mental health of application: "
  cd $SELF_PATH/..;
  php index.php &>/dev/null && printf "sane!\n" && return 0;

  printf "insane! :(\n\nwe strongly advice you to do one of the following things:\n"
  echo "  - build it (again properly) using './build autobuild'"
  echo "  - ask the maintainer for help"
  echo "  - try to fix it manually (and seek professional help afterwards)"
  return 1
}

# build all subcommands (interactive, easy starting point)
autobuild(){
  setemail && sethost && setdb 
  [[ $? == 1 ]] && echo "[E] error occured..aborting"
}

_usage(){
  grep "^[^_].\+(){$" $0 | while read line; do
    local cmd=$(echo "$line" | sed "s/(){//g")
    local info=$(grep -C0 -A0 -B1 "$cmd(){" $0 | sed "N;s/\n.*//g" )
    printf "    $0 %-20s %-40s\n" "$cmd" "$info" | grep "#"
  done; echo "";
}

if checkRequirements; then 
  [[ ! -n "$1" ]] && _usage || "$@"
fi

# vim: set foldingmethod=marker
